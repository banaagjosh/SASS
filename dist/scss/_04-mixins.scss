@function set-color($color) {
  @if (lightness($color) > 40) {
    @return $clr-dark;
  } @else {
    @return $clr-light;
  }
}


@mixin mediaQuery($width) {
  @media screen and (min-width: $width) {
    @content;
  }
}


@mixin scrollbar($color: $color-primary) {
  &::-webkit-scrollbar {
    width: 1rem;
  }
  &::-webkit-scrollbar-thumb {
    background-color: $color;
    border-radius: 2rem;
  }

  &::-webkit-scrollbar-thumb:hover {
    background-color: darken($color, 5);
  }

  &::-webkit-scrollbar-track {
    background-color: $color-gray;
  }
}

@mixin centerAll($height:1px) {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 1px;
}

@mixin centerBetween(){
  display: flex;
  justify-content: space-between;
  align-items: center;
}


@mixin grid($cols, $gap) {
  display: grid;
  grid-template-columns: repeat($cols, 1fr);
  grid-gap: ($gap);
}
@mixin gridUneven($cols, $gap) {
  display: grid;
  grid-template-columns: $cols;
  grid-gap: ($gap);
}


@mixin imgFit($width: 1px, $height: 1px) {
  width: $width;
  height: $height;
  object-fit: cover;
  object-position: center center;
}

@mixin psuedo($top:0, $left:0) {
  content: '';
  position: absolute;
  left: $left;
  top: $top; 
}

@mixin mediaQuerytablet($width){
  @media screen and (max-width:$width){
    @content;
  }
}

@use "sass:math";

@mixin xs {
  @media screen and (min-width: map-get($breakpoints, "xs")) {
    @content;
  }
}
@mixin sm {
  @media screen and (min-width: map-get($breakpoints, "sm")) {
    @content;
  }
}

@mixin md {
  @media screen and (min-width: map-get($breakpoints, "md")) {
    @content;
  }
}

@mixin lg {
  @media screen and (min-width: map-get($breakpoints, "lg")) {
    @content;
  }
}

@mixin xl {
  @media screen and (min-width: map-get($breakpoints, "xl")) {
    @content;
  }
}

.container {
  width: 100%;
  max-width: 120rem;
  margin: 0 auto;
  padding: 0 1.5rem;
}

.row {
  display: flex;
  flex-flow: row wrap;
}

.row > * {
  max-width: 100%;
  width: 100%;
  padding: 0.5rem;
}

@include xs {
  @for $i from 1 through $grid-cols {
    .col-xs-#{$i} {
      flex: 0 0 math.div($i * 100%, $grid-cols);
    }
  }
}

@include sm {
  @for $i from 1 through $grid-cols {
    .col-sm-#{$i} {
      flex: 0 0 math.div($i * 100%, $grid-cols);
    }
  }
}

@include md {
  @for $i from 1 through $grid-cols {
    .col-md-#{$i} {
      flex: 0 0 math.div($i * 100%, $grid-cols);
    }
  }
}

@include lg {
  @for $i from 1 through $grid-cols {
    .col-lg-#{$i} {
      flex: 0 0 math.div($i * 100%, $grid-cols);
    }
  }
}$displays: flex, grid, block;

@each $display in $displays {
  .d--#{$display} {
    display: $display;
  }
}

$colors: (
  "primary": $clr-primary,
  "light": $clr-light,
  "dark": $clr-dark,
);

@each $key, $val in $colors {
  .text--#{$key} {
    color: #{$val};
  }
  .bg--#{$key} {
    background-color: #{$val};
  }
}

@for $i from 1 through 6 {
  .mb--#{$i} {
    margin-bottom: $i + rem;
  }

  .gap--#{$i}{
    gap: #{$i}+rem;
  }

  .py--#{$i}{
    padding: #{$i}+rem 0;
  }
}



$alignments: left, right, center;

@each $alignment in $alignments {
  .text--#{$alignment} {
    text-align: $alignment;
  }

  }


$justify: (
  "start": flex-start,
  "end": flex-end,
  "between": space-between,
  "around": space-around,
  "center": center,
);

@each $key, $val in $justify {
  .justify--#{$key} {
    justify-content: $val;
  }
  .align--#{$key}{
    align-items: $val;
  }
}